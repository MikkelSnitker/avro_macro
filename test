Ident { ident: "EventOne", span: #0 bytes(1848..1856) }
Ident { ident: "EventTwo", span: #0 bytes(1870..1878) }
#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use std::{
    io::{Read, Write},
    time,
};
use apache_avro::AvroSchema;
use avro_macro::{schema, TaggedEnum};
use base64::prelude::*;
use serde::{Deserialize, Serialize};
mod Test {
    use serde::{Deserialize, Serialize};
    pub mod test {
        pub struct AudienceAddedToList {
            #[avro(rename = "automated")]
            #[serde(rename = "automated")]
            pub automated: Option<bool>,
            #[avro(rename = "brandId")]
            #[serde(rename = "brandId")]
            pub brand_id: Option<String>,
            #[avro(rename = "countryCodes")]
            #[serde(rename = "countryCodes")]
            pub country_codes: Option<Vec<String>>,
            #[avro(rename = "createdAt")]
            #[serde(rename = "createdAt")]
            pub created_at: String,
            #[avro(rename = "entityId")]
            #[serde(rename = "entityId")]
            pub entity_id: String,
            #[avro(rename = "entityType")]
            #[serde(rename = "entityType")]
            pub entity_type: String,
            #[avro(rename = "gender")]
            #[serde(rename = "gender")]
            pub gender: Vec<String>,
            #[avro(rename = "id")]
            #[serde(rename = "id")]
            pub id: String,
            #[avro(rename = "maxAge")]
            #[serde(rename = "maxAge")]
            pub max_age: f64,
            #[avro(rename = "minAge")]
            #[serde(rename = "minAge")]
            pub min_age: f64,
            #[avro(rename = "name")]
            #[serde(rename = "name")]
            pub name: String,
            #[avro(rename = "updatedAt")]
            #[serde(rename = "updatedAt")]
            pub updated_at: String,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for AudienceAddedToList {
            #[inline]
            fn clone(&self) -> AudienceAddedToList {
                AudienceAddedToList {
                    automated: ::core::clone::Clone::clone(&self.automated),
                    brand_id: ::core::clone::Clone::clone(&self.brand_id),
                    country_codes: ::core::clone::Clone::clone(&self.country_codes),
                    created_at: ::core::clone::Clone::clone(&self.created_at),
                    entity_id: ::core::clone::Clone::clone(&self.entity_id),
                    entity_type: ::core::clone::Clone::clone(&self.entity_type),
                    gender: ::core::clone::Clone::clone(&self.gender),
                    id: ::core::clone::Clone::clone(&self.id),
                    max_age: ::core::clone::Clone::clone(&self.max_age),
                    min_age: ::core::clone::Clone::clone(&self.min_age),
                    name: ::core::clone::Clone::clone(&self.name),
                    updated_at: ::core::clone::Clone::clone(&self.updated_at),
                }
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for AudienceAddedToList {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "AudienceAddedToList",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "automated",
                        &self.automated,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "brandId",
                        &self.brand_id,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "countryCodes",
                        &self.country_codes,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "createdAt",
                        &self.created_at,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "entityId",
                        &self.entity_id,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "entityType",
                        &self.entity_type,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "gender",
                        &self.gender,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "id",
                        &self.id,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "maxAge",
                        &self.max_age,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "minAge",
                        &self.min_age,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "name",
                        &self.name,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "updatedAt",
                        &self.updated_at,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for AudienceAddedToList {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "automated" => _serde::__private::Ok(__Field::__field0),
                                "brandId" => _serde::__private::Ok(__Field::__field1),
                                "countryCodes" => _serde::__private::Ok(__Field::__field2),
                                "createdAt" => _serde::__private::Ok(__Field::__field3),
                                "entityId" => _serde::__private::Ok(__Field::__field4),
                                "entityType" => _serde::__private::Ok(__Field::__field5),
                                "gender" => _serde::__private::Ok(__Field::__field6),
                                "id" => _serde::__private::Ok(__Field::__field7),
                                "maxAge" => _serde::__private::Ok(__Field::__field8),
                                "minAge" => _serde::__private::Ok(__Field::__field9),
                                "name" => _serde::__private::Ok(__Field::__field10),
                                "updatedAt" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"automated" => _serde::__private::Ok(__Field::__field0),
                                b"brandId" => _serde::__private::Ok(__Field::__field1),
                                b"countryCodes" => _serde::__private::Ok(__Field::__field2),
                                b"createdAt" => _serde::__private::Ok(__Field::__field3),
                                b"entityId" => _serde::__private::Ok(__Field::__field4),
                                b"entityType" => _serde::__private::Ok(__Field::__field5),
                                b"gender" => _serde::__private::Ok(__Field::__field6),
                                b"id" => _serde::__private::Ok(__Field::__field7),
                                b"maxAge" => _serde::__private::Ok(__Field::__field8),
                                b"minAge" => _serde::__private::Ok(__Field::__field9),
                                b"name" => _serde::__private::Ok(__Field::__field10),
                                b"updatedAt" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<AudienceAddedToList>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = AudienceAddedToList;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct AudienceAddedToList",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Vec<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct AudienceAddedToList with 12 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(AudienceAddedToList {
                                automated: __field0,
                                brand_id: __field1,
                                country_codes: __field2,
                                created_at: __field3,
                                entity_id: __field4,
                                entity_type: __field5,
                                gender: __field6,
                                id: __field7,
                                max_age: __field8,
                                min_age: __field9,
                                name: __field10,
                                updated_at: __field11,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<String> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "automated",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "brandId",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "countryCodes",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "createdAt",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "entityId",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "entityType",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("gender"),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("maxAge"),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<f64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("minAge"),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<f64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("name"),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "updatedAt",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("automated")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("brandId")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("countryCodes")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("createdAt")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("entityId")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("entityType")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("gender")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("id")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("maxAge")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("minAge")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("name")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("updatedAt")?
                                }
                            };
                            _serde::__private::Ok(AudienceAddedToList {
                                automated: __field0,
                                brand_id: __field1,
                                country_codes: __field2,
                                created_at: __field3,
                                entity_id: __field4,
                                entity_type: __field5,
                                gender: __field6,
                                id: __field7,
                                max_age: __field8,
                                min_age: __field9,
                                name: __field10,
                                updated_at: __field11,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "automated",
                        "brandId",
                        "countryCodes",
                        "createdAt",
                        "entityId",
                        "entityType",
                        "gender",
                        "id",
                        "maxAge",
                        "minAge",
                        "name",
                        "updatedAt",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "AudienceAddedToList",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<
                                AudienceAddedToList,
                            >,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for AudienceAddedToList {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for AudienceAddedToList {
            #[inline]
            fn eq(&self, other: &AudienceAddedToList) -> bool {
                self.automated == other.automated && self.brand_id == other.brand_id
                    && self.country_codes == other.country_codes
                    && self.created_at == other.created_at
                    && self.entity_id == other.entity_id
                    && self.entity_type == other.entity_type
                    && self.gender == other.gender && self.id == other.id
                    && self.max_age == other.max_age && self.min_age == other.min_age
                    && self.name == other.name && self.updated_at == other.updated_at
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for AudienceAddedToList {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "automated",
                    "brand_id",
                    "country_codes",
                    "created_at",
                    "entity_id",
                    "entity_type",
                    "gender",
                    "id",
                    "max_age",
                    "min_age",
                    "name",
                    "updated_at",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.automated,
                    &self.brand_id,
                    &self.country_codes,
                    &self.created_at,
                    &self.entity_id,
                    &self.entity_type,
                    &self.gender,
                    &self.id,
                    &self.max_age,
                    &self.min_age,
                    &self.name,
                    &&self.updated_at,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "AudienceAddedToList",
                    names,
                    values,
                )
            }
        }
        impl apache_avro::schema::derive::AvroSchemaComponent for AudienceAddedToList {
            fn get_schema_in_ctxt(
                named_schemas: &mut std::collections::HashMap<
                    apache_avro::schema::Name,
                    apache_avro::schema::Schema,
                >,
                enclosing_namespace: &Option<String>,
            ) -> apache_avro::schema::Schema {
                let name = apache_avro::schema::Name::new("AudienceAddedToList")
                    .expect(
                        &{
                            let res = ::alloc::fmt::format(
                                format_args!(
                                    "Unable to parse schema name {0}",
                                    "AudienceAddedToList",
                                ),
                            );
                            res
                        }[..],
                    )
                    .fully_qualified_name(enclosing_namespace);
                let enclosing_namespace = &name.namespace;
                if named_schemas.contains_key(&name) {
                    apache_avro::schema::Schema::Ref {
                        name: name.clone(),
                    }
                } else {
                    named_schemas
                        .insert(
                            name.clone(),
                            apache_avro::schema::Schema::Ref {
                                name: name.clone(),
                            },
                        );
                    let schema_fields = <[_]>::into_vec(
                        #[rustc_box]
                        ::alloc::boxed::Box::new([
                            apache_avro::schema::RecordField {
                                name: "automated".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: <Option<
                                    bool,
                                > as apache_avro::schema::derive::AvroSchemaComponent>::get_schema_in_ctxt(
                                    named_schemas,
                                    enclosing_namespace,
                                ),
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 0usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "brandId".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: <Option<
                                    String,
                                > as apache_avro::schema::derive::AvroSchemaComponent>::get_schema_in_ctxt(
                                    named_schemas,
                                    enclosing_namespace,
                                ),
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 1usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "countryCodes".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: <Option<
                                    Vec<String>,
                                > as apache_avro::schema::derive::AvroSchemaComponent>::get_schema_in_ctxt(
                                    named_schemas,
                                    enclosing_namespace,
                                ),
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 2usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "createdAt".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::String,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 3usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "entityId".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::String,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 4usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "entityType".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::String,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 5usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "gender".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: <Vec<
                                    String,
                                > as apache_avro::schema::derive::AvroSchemaComponent>::get_schema_in_ctxt(
                                    named_schemas,
                                    enclosing_namespace,
                                ),
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 6usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "id".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::String,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 7usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "maxAge".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::Double,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 8usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "minAge".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::Double,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 9usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "name".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::String,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 10usize,
                                custom_attributes: Default::default(),
                            },
                            apache_avro::schema::RecordField {
                                name: "updatedAt".to_string(),
                                doc: None,
                                default: None,
                                aliases: None,
                                schema: apache_avro::schema::Schema::String,
                                order: apache_avro::schema::RecordFieldOrder::Ascending,
                                position: 11usize,
                                custom_attributes: Default::default(),
                            },
                        ]),
                    );
                    let name = apache_avro::schema::Name::new("AudienceAddedToList")
                        .expect(
                            &{
                                let res = ::alloc::fmt::format(
                                    format_args!(
                                        "Unable to parse struct name for schema {0}",
                                        "AudienceAddedToList",
                                    ),
                                );
                                res
                            }[..],
                        );
                    let lookup: std::collections::BTreeMap<String, usize> = schema_fields
                        .iter()
                        .map(|field| (field.name.to_owned(), field.position))
                        .collect();
                    apache_avro::schema::Schema::Record(apache_avro::schema::RecordSchema {
                        name,
                        aliases: None,
                        doc: None,
                        fields: schema_fields,
                        lookup,
                        attributes: Default::default(),
                    })
                }
            }
        }
    }
    pub use test::AudienceAddedToList;
}
struct Base64Writer {
    buf: Vec<u8>,
}
impl std::io::Write for Base64Writer {
    fn write(&mut self, buf: &[u8]) -> std::io::Result<usize> {
        self.buf.append(&mut buf.to_vec());
        Ok(buf.len())
    }
    fn flush(&mut self) -> std::io::Result<()> {
        std::io::stdout()
            .write_all(BASE64_STANDARD.encode(self.buf.as_slice()).as_bytes())
    }
}
struct Payload {
    schema: String,
    schemaType: String,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Payload {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Payload",
                false as usize + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "schema",
                &self.schema,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "schemaType",
                &self.schemaType,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
impl apache_avro::schema::derive::AvroSchemaComponent for Payload {
    fn get_schema_in_ctxt(
        named_schemas: &mut std::collections::HashMap<
            apache_avro::schema::Name,
            apache_avro::schema::Schema,
        >,
        enclosing_namespace: &Option<String>,
    ) -> apache_avro::schema::Schema {
        let name = apache_avro::schema::Name::new("Payload")
            .expect(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!("Unable to parse schema name {0}", "Payload"),
                    );
                    res
                }[..],
            )
            .fully_qualified_name(enclosing_namespace);
        let enclosing_namespace = &name.namespace;
        if named_schemas.contains_key(&name) {
            apache_avro::schema::Schema::Ref {
                name: name.clone(),
            }
        } else {
            named_schemas
                .insert(
                    name.clone(),
                    apache_avro::schema::Schema::Ref {
                        name: name.clone(),
                    },
                );
            let schema_fields = <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    apache_avro::schema::RecordField {
                        name: "schema".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: apache_avro::schema::Schema::String,
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 0usize,
                        custom_attributes: Default::default(),
                    },
                    apache_avro::schema::RecordField {
                        name: "schemaType".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: apache_avro::schema::Schema::String,
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 1usize,
                        custom_attributes: Default::default(),
                    },
                ]),
            );
            let name = apache_avro::schema::Name::new("Payload")
                .expect(
                    &{
                        let res = ::alloc::fmt::format(
                            format_args!(
                                "Unable to parse struct name for schema {0}",
                                "Payload",
                            ),
                        );
                        res
                    }[..],
                );
            let lookup: std::collections::BTreeMap<String, usize> = schema_fields
                .iter()
                .map(|field| (field.name.to_owned(), field.position))
                .collect();
            apache_avro::schema::Schema::Record(apache_avro::schema::RecordSchema {
                name,
                aliases: None,
                doc: None,
                fields: schema_fields,
                lookup,
                attributes: Default::default(),
            })
        }
    }
}
fn insertAvroSchema() {}
struct EventOne {
    title: String,
    id: String,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EventOne {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "EventOne",
                false as usize + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "id",
                &self.id,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EventOne {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "title" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"title" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<EventOne>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = EventOne;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct EventOne",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct EventOne with 2 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct EventOne with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(EventOne {
                        title: __field0,
                        id: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("title")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("id")?
                        }
                    };
                    _serde::__private::Ok(EventOne {
                        title: __field0,
                        id: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["title", "id"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "EventOne",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<EventOne>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
impl apache_avro::schema::derive::AvroSchemaComponent for EventOne {
    fn get_schema_in_ctxt(
        named_schemas: &mut std::collections::HashMap<
            apache_avro::schema::Name,
            apache_avro::schema::Schema,
        >,
        enclosing_namespace: &Option<String>,
    ) -> apache_avro::schema::Schema {
        let name = apache_avro::schema::Name::new("EventOne")
            .expect(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!("Unable to parse schema name {0}", "EventOne"),
                    );
                    res
                }[..],
            )
            .fully_qualified_name(enclosing_namespace);
        let enclosing_namespace = &name.namespace;
        if named_schemas.contains_key(&name) {
            apache_avro::schema::Schema::Ref {
                name: name.clone(),
            }
        } else {
            named_schemas
                .insert(
                    name.clone(),
                    apache_avro::schema::Schema::Ref {
                        name: name.clone(),
                    },
                );
            let schema_fields = <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    apache_avro::schema::RecordField {
                        name: "title".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: apache_avro::schema::Schema::String,
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 0usize,
                        custom_attributes: Default::default(),
                    },
                    apache_avro::schema::RecordField {
                        name: "id".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: apache_avro::schema::Schema::String,
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 1usize,
                        custom_attributes: Default::default(),
                    },
                ]),
            );
            let name = apache_avro::schema::Name::new("EventOne")
                .expect(
                    &{
                        let res = ::alloc::fmt::format(
                            format_args!(
                                "Unable to parse struct name for schema {0}",
                                "EventOne",
                            ),
                        );
                        res
                    }[..],
                );
            let lookup: std::collections::BTreeMap<String, usize> = schema_fields
                .iter()
                .map(|field| (field.name.to_owned(), field.position))
                .collect();
            apache_avro::schema::Schema::Record(apache_avro::schema::RecordSchema {
                name,
                aliases: None,
                doc: None,
                fields: schema_fields,
                lookup,
                attributes: Default::default(),
            })
        }
    }
}
struct EventTwo {
    age: u8,
    id: String,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for EventTwo {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "EventTwo",
                false as usize + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "age",
                &self.age,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "id",
                &self.id,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for EventTwo {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "age" => _serde::__private::Ok(__Field::__field0),
                        "id" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"age" => _serde::__private::Ok(__Field::__field0),
                        b"id" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<EventTwo>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = EventTwo;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "struct EventTwo",
                    )
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        u8,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct EventTwo with 2 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct EventTwo with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(EventTwo {
                        age: __field0,
                        id: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<u8> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("age"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<u8>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("age")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("id")?
                        }
                    };
                    _serde::__private::Ok(EventTwo {
                        age: __field0,
                        id: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["age", "id"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "EventTwo",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<EventTwo>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
impl apache_avro::schema::derive::AvroSchemaComponent for EventTwo {
    fn get_schema_in_ctxt(
        named_schemas: &mut std::collections::HashMap<
            apache_avro::schema::Name,
            apache_avro::schema::Schema,
        >,
        enclosing_namespace: &Option<String>,
    ) -> apache_avro::schema::Schema {
        let name = apache_avro::schema::Name::new("EventTwo")
            .expect(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!("Unable to parse schema name {0}", "EventTwo"),
                    );
                    res
                }[..],
            )
            .fully_qualified_name(enclosing_namespace);
        let enclosing_namespace = &name.namespace;
        if named_schemas.contains_key(&name) {
            apache_avro::schema::Schema::Ref {
                name: name.clone(),
            }
        } else {
            named_schemas
                .insert(
                    name.clone(),
                    apache_avro::schema::Schema::Ref {
                        name: name.clone(),
                    },
                );
            let schema_fields = <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    apache_avro::schema::RecordField {
                        name: "age".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: apache_avro::schema::Schema::Int,
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 0usize,
                        custom_attributes: Default::default(),
                    },
                    apache_avro::schema::RecordField {
                        name: "id".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: apache_avro::schema::Schema::String,
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 1usize,
                        custom_attributes: Default::default(),
                    },
                ]),
            );
            let name = apache_avro::schema::Name::new("EventTwo")
                .expect(
                    &{
                        let res = ::alloc::fmt::format(
                            format_args!(
                                "Unable to parse struct name for schema {0}",
                                "EventTwo",
                            ),
                        );
                        res
                    }[..],
                );
            let lookup: std::collections::BTreeMap<String, usize> = schema_fields
                .iter()
                .map(|field| (field.name.to_owned(), field.position))
                .collect();
            apache_avro::schema::Schema::Record(apache_avro::schema::RecordSchema {
                name,
                aliases: None,
                doc: None,
                fields: schema_fields,
                lookup,
                attributes: Default::default(),
            })
        }
    }
}
struct Foo {
    event1: EventOne,
    event2: EventTwo,
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Foo {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = _serde::Serializer::serialize_struct(
                __serializer,
                "Foo",
                false as usize + 1 + 1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "event1",
                &self.event1,
            )?;
            _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "event2",
                &self.event2,
            )?;
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Foo {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "event1" => _serde::__private::Ok(__Field::__field0),
                        "event2" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"event1" => _serde::__private::Ok(__Field::__field0),
                        b"event2" => _serde::__private::Ok(__Field::__field1),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Foo>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Foo;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Foo")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match _serde::de::SeqAccess::next_element::<
                        EventOne,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct Foo with 2 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match _serde::de::SeqAccess::next_element::<
                        EventTwo,
                    >(&mut __seq)? {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct Foo with 2 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Foo {
                        event1: __field0,
                        event2: __field1,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<EventOne> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<EventTwo> = _serde::__private::None;
                    while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                        __Field,
                    >(&mut __map)? {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("event1"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<EventOne>(&mut __map)?,
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("event2"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    _serde::de::MapAccess::next_value::<EventTwo>(&mut __map)?,
                                );
                            }
                            _ => {
                                let _ = _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map)?;
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("event1")?
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            _serde::__private::de::missing_field("event2")?
                        }
                    };
                    _serde::__private::Ok(Foo {
                        event1: __field0,
                        event2: __field1,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &["event1", "event2"];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Foo",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Foo>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
impl apache_avro::schema::derive::AvroSchemaComponent for Foo {
    fn get_schema_in_ctxt(
        named_schemas: &mut std::collections::HashMap<
            apache_avro::schema::Name,
            apache_avro::schema::Schema,
        >,
        enclosing_namespace: &Option<String>,
    ) -> apache_avro::schema::Schema {
        let name = apache_avro::schema::Name::new("Foo")
            .expect(
                &{
                    let res = ::alloc::fmt::format(
                        format_args!("Unable to parse schema name {0}", "Foo"),
                    );
                    res
                }[..],
            )
            .fully_qualified_name(enclosing_namespace);
        let enclosing_namespace = &name.namespace;
        if named_schemas.contains_key(&name) {
            apache_avro::schema::Schema::Ref {
                name: name.clone(),
            }
        } else {
            named_schemas
                .insert(
                    name.clone(),
                    apache_avro::schema::Schema::Ref {
                        name: name.clone(),
                    },
                );
            let schema_fields = <[_]>::into_vec(
                #[rustc_box]
                ::alloc::boxed::Box::new([
                    apache_avro::schema::RecordField {
                        name: "event1".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: <EventOne as apache_avro::schema::derive::AvroSchemaComponent>::get_schema_in_ctxt(
                            named_schemas,
                            enclosing_namespace,
                        ),
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 0usize,
                        custom_attributes: Default::default(),
                    },
                    apache_avro::schema::RecordField {
                        name: "event2".to_string(),
                        doc: None,
                        default: None,
                        aliases: None,
                        schema: <EventTwo as apache_avro::schema::derive::AvroSchemaComponent>::get_schema_in_ctxt(
                            named_schemas,
                            enclosing_namespace,
                        ),
                        order: apache_avro::schema::RecordFieldOrder::Ascending,
                        position: 1usize,
                        custom_attributes: Default::default(),
                    },
                ]),
            );
            let name = apache_avro::schema::Name::new("Foo")
                .expect(
                    &{
                        let res = ::alloc::fmt::format(
                            format_args!(
                                "Unable to parse struct name for schema {0}",
                                "Foo",
                            ),
                        );
                        res
                    }[..],
                );
            let lookup: std::collections::BTreeMap<String, usize> = schema_fields
                .iter()
                .map(|field| (field.name.to_owned(), field.position))
                .collect();
            apache_avro::schema::Schema::Record(apache_avro::schema::RecordSchema {
                name,
                aliases: None,
                doc: None,
                fields: schema_fields,
                lookup,
                attributes: Default::default(),
            })
        }
    }
}
enum Events {
    EventOne(EventOne),
    EventTwo(String),
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Events {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                Events::EventOne(ref __field0) => {
                    _serde::Serializer::serialize_newtype_variant(
                        __serializer,
                        "Events",
                        0u32,
                        "EventOne",
                        __field0,
                    )
                }
                Events::EventTwo(ref __field0) => {
                    _serde::Serializer::serialize_newtype_variant(
                        __serializer,
                        "Events",
                        1u32,
                        "EventTwo",
                        __field0,
                    )
                }
            }
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Events {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "variant identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"variant index 0 <= i < 2",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "EventOne" => _serde::__private::Ok(__Field::__field0),
                        "EventTwo" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_variant(__value, VARIANTS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"EventOne" => _serde::__private::Ok(__Field::__field0),
                        b"EventTwo" => _serde::__private::Ok(__Field::__field1),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_variant(__value, VARIANTS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Events>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Events;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "enum Events")
                }
                fn visit_enum<__A>(
                    self,
                    __data: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::EnumAccess<'de>,
                {
                    match _serde::de::EnumAccess::variant(__data)? {
                        (__Field::__field0, __variant) => {
                            _serde::__private::Result::map(
                                _serde::de::VariantAccess::newtype_variant::<
                                    EventOne,
                                >(__variant),
                                Events::EventOne,
                            )
                        }
                        (__Field::__field1, __variant) => {
                            _serde::__private::Result::map(
                                _serde::de::VariantAccess::newtype_variant::<
                                    String,
                                >(__variant),
                                Events::EventTwo,
                            )
                        }
                    }
                }
            }
            #[doc(hidden)]
            const VARIANTS: &'static [&'static str] = &["EventOne", "EventTwo"];
            _serde::Deserializer::deserialize_enum(
                __deserializer,
                "Events",
                VARIANTS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Events>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
impl Events {
    fn from_str(tag: &str, value: &str) -> Result<Self, serde_json::Error> {
        match tag {
            "EventOne" => {
                let value = serde_json::from_str::<EventOne>(value)?;
                Events::EventOne(value)
            }
            "EventTwo" => {
                let value = serde_json::from_str::<EventTwo>(value)?;
                Events::EventTwo(value)
            }
            _ => {
                ::core::panicking::panic_fmt(format_args!("Unsupported"));
            }
        }
    }
}
fn main() {
    let a = Events::from_str("EventOne1", r#"{"title":"Foobar", "id": "ID_1"}"#);
    {
        ::std::io::_print(format_args!("FOO {0:?}\n", a));
    }
}
